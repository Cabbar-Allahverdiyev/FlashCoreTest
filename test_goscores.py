# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from webdriver_manager.chrome import  ChromeDriverManager
from commonCommands.iwaitCommand import IWaitCommand
from constants import globalConstants
from commonCommands.waitForCommonCommand import WaitForCommonCommand
from commonCommands.seleniumActionCommand import SeleniumActionCommand

class TestGoscores():

  def __init__(self) -> None:
    self.driver = webdriver.Chrome(ChromeDriverManager().install())
    self.vars = {}
    self.scoresBtnByCssSelector=".filters__tab:nth-child(3) > .filters__text"
    self.waitForCommonCommand=WaitForCommonCommand(self.driver)
    self.actionCommand=SeleniumActionCommand(self.driver);

  def setup_method(self, method):
    self.driver = webdriver.Chrome(ChromeDriverManager().install())
    self.vars = {}
    self.scoresBtnByCssSelector=".filters__tab:nth-child(3) > .filters__text"
    self.waitForCommonCommand=WaitForCommonCommand()
    self.actionCommand=SeleniumActionCommand();
    
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_goscores(self):
    self.driver.get(globalConstants.URL)
    self.driver.maximize_window()
    self.waitForCommonCommand.waitByCssSelector(self.scoresBtnByCssSelector,10)
    #WebDriverWait(self.driver, 5).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR,self.scoresBtnByCssSelector)))
    scoresBtn=self.actionCommand.findByCssSelector(self.scoresBtnByCssSelector)
    scoresBtn.click();
    #self.driver.find_element(By.CSS_SELECTOR, self.scoresBtnByCssSelector).click()
    self.waitForCommonCommand.waitByCssSelector("#g_1_EPyIJVEL .up")
    # WebDriverWait(self.driver, 5).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "#g_1_EPyIJVEL .up")))

    assert self.driver.find_element(By.CSS_SELECTOR, "#g_1_EPyIJVEL .up").text == "1.57"
  
